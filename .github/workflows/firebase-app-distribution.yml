name: üì¶ APK to Firebase Release

on:
  workflow_call:
    secrets:
      ANDROID_KEYSTORE_BASE64:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      FIREBASE_SERVICE_ACCOUNT_JSON:
        required: true
      FIREBASE_APP_ID:
        required: true

permissions:
  contents: write

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì∂ Set up Flutter
        uses: ./.github/actions/setup-flutter

      - name: üìÖ Cache Flutter pub packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: üì¶ Install Flutter dependencies
        run: flutter pub get

      - name: üîê Decode keystore
        run: echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/ci-release-key.keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: ‚úÖ Confirm keystore file exists
        run: ls -l android/app/ci-release-key.keystore

      - name: üì¶ Extract and Increment Version in pubspec.yaml
        run: |
          # Extract version and build number from pubspec.yaml
          VERSION_NAME=$(grep -E '^(android_version|version):' pubspec.yaml | head -n 1 | awk '{print $2}')
          VERSION=$(echo $VERSION_NAME | cut -d '+' -f 1)   # i.e. 2.0.0 or 2.0.1
          BUILD_NUMBER=$(echo $VERSION_NAME | cut -d '+' -f 2)  # i.e. 70 or 80

          # If there's no BUILD_NUMBER, default to 0
          BUILD_NUMBER=${BUILD_NUMBER:-0}

          # Increment build number
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))

          # New version format (version+new_build_number)
          NEW_VERSION="${VERSION}+${NEW_BUILD_NUMBER}"

          # Update pubspec.yaml with the new version
          sed -i "s/version: ${VERSION_NAME}/version: ${NEW_VERSION}/" pubspec.yaml
          sed -i "s/android_version: ${VERSION_NAME}/android_version: ${NEW_VERSION}/" pubspec.yaml

          # Output the new version for confirmation
          echo "Updated version: ${NEW_VERSION}"

          # Output variables for use in later steps
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "NEW_BUILD_NUMBER=${NEW_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: üèóÔ∏è Build Universal Release APK
        run: flutter build apk --release
        env:
          CI: true
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: üìÅ Install Firebase CLI
        run: npm install -g firebase-tools

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}"

      - name: üöÄ Upload APK to Firebase App Distribution
        id: upload_apk
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups "Internal"

      # Only proceed with commit and tag if APK was uploaded successfully
      - name: Commit and Tag Changes
        if: success() && steps.upload_apk.outcome == 'success'
        run: |

          # Configure Git user
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Commit the changes to pubspec.yaml
          git add pubspec.yaml
          git commit -m "Bump version to ${NEW_VERSION}"

          # Create a tag in the format Android_version_versioncode
          TAG_NAME="Android_v${VERSION}+${NEW_BUILD_NUMBER}"
          git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"

          # Push the commit and tag to the current branch
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git push origin "$CURRENT_BRANCH"
          git push origin "${TAG_NAME}"
