name: 📦 iOS TestFlight Release

on:
  workflow_call:
    secrets:
      APP_STORE_KEY_ID:
        required: true
      APP_STORE_API_KEY:
        required: true
      APP_STORE_ISSUER_ID:
        required: true
      MATCH_PASSWORD:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      TEMP_KEYCHAIN_PASSWORD:
        required: true

jobs:
  build-ios:
    runs-on: macos-latest

    env:
      XCODE_VERSION: 16.2

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 💻 Set up Flutter
        uses: ./.github/actions/setup-flutter

      - name: 📅 Cache Flutter pub packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: 📦 Install Flutter dependencies
        run: flutter pub get

      - name: 🔐 Decode App Store Connect API key (.p8)
        run: |
          echo "Length of APP_STORE_API_KEY: ${#APP_STORE_API_KEY}"
          echo "$APP_STORE_API_KEY" | base64 --decode > ios/AuthKey.p8
        env:
          APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}

      - name: 🔧 Install CocoaPods
        run: |
          sudo gem install cocoapods --no-document

      - name: 🧼 Clean CocoaPods and Reinstall
        run: |
          cd ios
          pod deintegrate
          pod cache clean --all
          pod install --verbose --no-repo-update

      - name: 💻 Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🧼 Clean Git workspace
        run: |
          rm -rf .git

      - name: 🧼 Clean Xcode Derived Data
        run: rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: 🚀 Build and upload to TestFlight
        id: fastlane_ios
        run: |
          fastlane ci_testflight_release

          # Output variables for use in later steps
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "NEW_BUILD_NUMBER=${NEW_BUILD_NUMBER}" >> $GITHUB_ENV

        working-directory: ./ios
        env:
          #FASTLANE_VERBOSE: 1
          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}

      # Only proceed with commit and tag if APK was uploaded successfully
      - name: Commit and Tag Changes
        if: success() && steps.fastlane_ios.outcome == 'success'
        run: |
          cd "$GITHUB_WORKSPACE"

          # Configure Git user
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Commit the changes to pubspec.yaml
          git add pubspec.yaml
          git commit -m "Bump iOS version to ${{ env.VERSION }}+${{ env.NEW_BUILD_NUMBER }}"

          # Create a tag in the format Android_version_versioncode
          TAG_NAME="iOS_${{ env.VERSION }}+${{ env.NEW_BUILD_NUMBER }}"
          git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"

          # Push the commit and tag to the current branch
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git push origin "$CURRENT_BRANCH"
          git push origin "${TAG_NAME}"
