default_platform(:ios)
require 'dotenv'
require 'yaml'

platform :ios do

  desc "ðŸ”§ Build and upload to TestFlight (local use only"
  lane :testflight_release do

    # Load the custom environment file
    Dotenv.load('.env.testflight_release')

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_KEY_ID"],
      issuer_id: ENV["APP_STORE_ISSUER_ID"],
      key_filepath: ENV["APP_STORE_KEY_PATH"]
    )

    sh "flutter clean"
    sh "flutter pub get"
    sh "pod install"

    increment_build_number(
      build_number: latest_testflight_build_number + 1
    )
    
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      silent: false,
      export_options: {
        signingStyle: "automatic",
        manageAppVersionAndBuildNumber: true
      }
    )

    #upload_to_testflight(
     # skip_waiting_for_build_processing: true,
      #distribute_external: false
    #)
  
  end

  desc "ðŸ¤– CI: Build and upload silently to TestFlight"
  lane :ci_testflight_release do

    create_keychain(
      name: "ci_temp_keychain",
      password: ENV['TEMP_KEYCHAIN_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    xcodes(
      version: ENV["XCODE_VERSION"],
      select_for_current_build_only: true
    )

    app_store_connect_api_key(
      key_id: ENV['APP_STORE_KEY_ID'],
      issuer_id: ENV['APP_STORE_ISSUER_ID'],
      key_filepath: './AuthKey.p8',
      in_house: false
    )

    match(
      type: "appstore",
      keychain_name: "ci_temp_keychain", # Specify the keychain to use
      keychain_password: ENV['TEMP_KEYCHAIN_PASSWORD']# Password for the keychain
    )

    # Read bundle ID from Xcode project
    app_identifier = get_app_identifier(xcodeproj: "ios/Runner.xcodeproj")
    puts "ðŸ“± App Identifier: #{app_identifier}"

    sh "echo Current dir: $(pwd)"
    sh "ls -la"

    # Read version/build from pubspec.yaml
    pubspec = YAML.load_file("../pubspec.yaml")
    version_string = pubspec["version"]
    version, _ = version_string.split("+")
    
    # Get latest build for this version
    latest = latest_testflight_build_number(
      app_identifier: app_identifier,
      version: version
    ) || 0
    
    new_build = latest + 1
    
    increment_build_number(
      build_number: new_build.to_s,
      skip_info_plist: true
    )
    
    puts "ðŸ“¦ Version: #{version}, Build: #{new_build}"

    # Build the app using build_app (this will use the incremented build number)
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      silent: false,
      verbose: true
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      distribute_external: false
    )

    # Clean up keychain (optional but good practice)
    delete_keychain(
      name: "ci_temp_keychain"
    )
    
  end

end