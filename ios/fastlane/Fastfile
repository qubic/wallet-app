default_platform(:ios)
require 'dotenv'
require 'yaml'

platform :ios do

  desc "🤖 CI: Build and upload silently to TestFlight"
  lane :ci_testflight_release do
    require 'xcodeproj'
    require 'spaceship'

    create_keychain(
      name: "ci_temp_keychain",
      password: ENV['TEMP_KEYCHAIN_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    xcodes(
      version: ENV["XCODE_VERSION"],
      select_for_current_build_only: true
    )

    app_store_connect_api_key(
      key_id: ENV['APP_STORE_KEY_ID'],
      issuer_id: ENV['APP_STORE_ISSUER_ID'],
      key_filepath: './AuthKey.p8',
      in_house: false
    )

    match(
      type: "appstore",
      keychain_name: "ci_temp_keychain", # Specify the keychain to use
      keychain_password: ENV['TEMP_KEYCHAIN_PASSWORD']# Password for the keychain
    )

    # Path from fastlane folder to project root
    pubspec_path = File.expand_path("../../pubspec.yaml", __dir__)

    UI.user_error!("❌ pubspec.yaml not found at #{pubspec_path}") unless File.exist?(pubspec_path)

    pubspec = YAML.load_file(pubspec_path)
    #version_string = pubspec["version"]
    #version, _ = version_string.split("+")

    # Read iOS version and build number, fallback if not present
    ios_version_string = pubspec["ios_version"]
    version_string = ios_version_string || pubspec["version"]  # Fallback to "version" if ios_version is not set
    version, ios_build = version_string.split("+")  # Split version and build number

    # Ensure version and build number are assigned
    version ||= "1.0.0"  # Fallback to a default version if neither ios_version nor version is set
    ios_build ||= "0"  # Fallback to 0 if no build number is specified

    # Path to the Xcode project
    xcodeproj_path = '../Runner.xcodeproj'

    # Open the Xcode project
    project = Xcodeproj::Project.open(xcodeproj_path)

    # Get the first target (usually 'Runner' for Flutter apps)
    target = project.targets.first

    # Get the bundle ID from the build settings
    bundle_id = target.build_configurations.first.build_settings['PRODUCT_BUNDLE_IDENTIFIER']

    UI.message("📱 iOS App Identifier: #{bundle_id} - Version: #{version} - Build: #{ios_build}")

    app = Spaceship::ConnectAPI::App.find(bundle_id)

    if app.nil?
      UI.user_error!("❌ Could not find app with bundle ID: #{bundle_id}")
    end

    builds = Spaceship::ConnectAPI::Build.all(
      app_id: app.id,
      sort: "-uploadedDate",
      limit: 200
    )

    if builds.empty?
      UI.user_error!("⚠️ No builds found for app: #{app.name} (#{app.bundle_id})")
      return 0
    end

    UI.message("🔍 Version being checked: #{version}")

    matching_builds = builds.select do |b|
      b.pre_release_version&.version == version
    end

    if matching_builds.empty?
      UI.user_error!("⚠️ No builds found for version #{version}")
      return 0
    end
  
    max_build_number = matching_builds.map { |b| b.version.to_i }.max || 0
    UI.message("🚀 Max build number for version #{version}: #{max_build_number}")

    next_build = max_build_number + 1

    UI.message("🔢 Next build number: #{next_build}")

    increment_build_number(build_number: next_build)

    # Update pubspec.yaml to match
    pubspec["version"] = "#{version}+#{next_build}"
    File.write(pubspec_path, pubspec.to_yaml)

    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      silent: false,
      verbose: true
    )

    begin
      # Attempt to upload the build to TestFlight
      upload_to_testflight(
        skip_waiting_for_build_processing: true,
        distribute_external: false
      )
      
      UI.message("🚀 Build uploaded successfully to TestFlight!")
    
      # If successful, commit the changes and create a tag
      tag_name = "iOS_v#{version}+#{next_build}"
      UI.message("🏷️ Creating git tag: #{tag_name}")

      UI.message("📂 Current directory: #{Dir.pwd}")

      #repo_root = sh("git rev-parse --show-toplevel").strip

      #Dir.chdir(repo_root) do
       # sh("git config user.name 'GitHub Actions'")
       # sh("git config user.email 'actions@github.com'")

       # sh("git add #{pubspec_path}")
        # Commit changes; if no changes, echo so the lane doesn't fail
       # sh("git commit -m '📦 iOS release: #{tag_name}' || echo 'Nothing to commit'")
       # sh("git tag #{tag_name}")
      #  sh("git push origin #{tag_name}")
     # end

    rescue => e
      UI.error("❌ Failed to upload the build to TestFlight: #{e.message}")
      UI.user_error!("Skipping commit and tag.")
    end

    # Clean up keychain
    delete_keychain(
      name: "ci_temp_keychain"
    )
    
  end

end